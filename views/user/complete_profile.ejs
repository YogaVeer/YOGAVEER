<% layout("layouts/boilerplate_login") %>

<h3 class="text-center mb-4" style="padding-top: 75px;">Complete Your Profile</h3>

<div class="card shadow-sm mx-auto p-4" style="max-width: 800px;">
  <% if (errors && errors.length > 0) { %>
    <div class="alert alert-danger">
      <ul class="mb-0">
        <% errors.forEach(error => { %>
          <li><%= error %></li>
        <% }) %>
      </ul>
    </div>
  <% } %>

  <form action="/user/profile" method="POST" enctype="multipart/form-data">
    <div class="row mb-3">
      <div class="col-md-6">
        <label class="form-label">Name:</label>
        <input type="text" name="name" value="<%= user.name || '' %>" class="form-control" required>
      </div>

     <!-- üîπ Contact Number Block -->
<div class="col-md-6">
  <label class="form-label">Contact Number:</label>
  <input type="text" name="contact" id="contact" value="<%= user.contact || '' %>" class="form-control" required>
</div>

<!-- üîπ Email OTP Block -->
<div class="col-md-6 mt-4">
  <label class="form-label">Email Verification via OTP:</label>
  <div class="input-group">
    <button type="button" class="btn btn-outline-primary" id="sendOtpBtn">Send OTP to Email</button>
  </div>
  <div id="otpFeedback" class="form-text mt-1"></div>
</div>

<!-- üîπ OTP Input Block -->
<div class="col-md-6 mt-4" id="otpContainer" style="display: none;">
  <label class="form-label">Enter OTP:</label>
  <div class="input-group">
    <input type="text" id="otpInput" class="form-control" placeholder="Enter OTP">
    <button type="button" class="btn btn-outline-success" id="verifyOtpBtn">Verify OTP</button>
  </div>
  <div class="form-text" id="otpStatus" style="color: red;"></div>
</div>

<!-- üîπ Hidden Field to Prevent Submit Without OTP Verification -->
<input type="hidden" id="otpVerified" name="otpVerified" value="false">


    <div class="row mb-3">
      <div class="col-md-6 mt-4">
        <label class="form-label">Date of Birth:</label>
        <input type="date" name="dob" id="dob" value="<%= user.dob || '' %>" class="form-control" required>
      </div>
      <div class="col-md-6 mt-4">
        <label class="form-label">Age:</label>
        <input type="text" id="age" class="form-control" disabled>
      </div>
    </div>

    <div class="mb-3">
      <label class="form-label">Gender:</label>
      <select name="gender" class="form-select" required>
        <option disabled selected>Select your gender</option>
        <% ["Male", "Female", "Non-binary", "Prefer not to say"].forEach(g => { %>
          <option value="<%= g %>" <%= user.gender === g ? 'selected' : '' %>><%= g %></option>
        <% }) %>
      </select>
    </div>

  <div class="mb-3">
    <label class="form-label">City with pincode:</label>
    <textarea 
      name="address" 
      class="form-control" 
      rows="2" 
      placeholder="e.g. Jaipur 
      302001"><%= user.address ? user.address : '' %></textarea>
  </div>

    <div class="mb-3">
      <label class="form-label">Any Medical Conditions We Should Be Aware Of?</label>
      <textarea name="medicalConditions" class="form-control" rows="2"><%= user.medicalConditions || '' %></textarea>
    </div>

    <div class="mb-3">
      <label class="form-label">Wellness Challenges (Select all that apply):</label>
      <div class="row">
        <% const selectedChallenges = user.wellnessChallenges || []; %>
        <% [
          "Healthy- Joining to Learn Yoga", "Stress or anxiety", "Sleep disturbances or insomnia",
          "Overweight or obesity", "High blood pressure", "Low blood pressure",
          "Diabetes (Type 1 or Type 2)", "Thyroid imbalance", "Chronic back pain",
          "Joint stiffness or arthritis", "Respiratory issues (e.g., asthma)",
          "Post-surgery recovery", "Women‚Äôs health issues (e.g., PCOS, prenatal/postnatal)",
          "Low energy or fatigue", "Poor flexibility or mobility"
        ].forEach(option => { %>
          <div class="col-md-6">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" name="wellnessChallenges" value="<%= option %>" 
                <%= selectedChallenges.includes(option) ? 'checked' : '' %>>
              <label class="form-check-label"><%= option %></label>
            </div>
          </div>
        <% }) %>
      </div>
    </div>

    <div class="mb-3">
      <label class="form-label">Primary Yoga Goals (Choose all that apply):</label>
      <div class="row">
        <% const selectedGoals = user.yogaGoals || []; %>
        <% [
          "Weight loss", "Stress relief & mental clarity", "Flexibility and mobility",
          "Spiritual development", "General fitness", "Recovery from injury",
          "Prenatal/postnatal wellness", "Managing lifestyle conditions (e.g., diabetes, hypertension)"
        ].forEach(goal => { %>
          <div class="col-md-6">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" name="yogaGoals" value="<%= goal %>" 
                <%= selectedGoals.includes(goal) ? 'checked' : '' %>>
              <label class="form-check-label"><%= goal %></label>
            </div>
          </div>
        <% }) %>
      </div>
    </div>

    <div class="mb-3"> 
      <label for="referralSource" class="form-label">How did you hear about us?</label>
      <select class="form-select" name="referralSource" id="referralSource" required>
        <option value="">Select...</option>
        <option value="Social media">Facebook</option>
        <option value="Friend/family">Instagram</option>
        <option value="Online search">LinkedIn</option>
        <option value="Flyer/poster">Whatsapp</option>
        <option value="Other">Promo Code</option>
      </select>
    </div>

    <!-- Text input that shows only if 'Other' is selected -->
    <div class="mb-3 d-none" id="otherReferralDiv">
      <label for="otherReferralInput" class="form-label">Please specify</label>
      <input type="text" class="form-control" name="referralSourceOther" id="otherReferralInput" placeholder="Type your answer...">
    </div>


    <div class="mb-3">
      <label class="form-label">Preferred Time Slot:</label>
      <select name="preferredTimeSlot" class="form-select" required>
        <option disabled selected>Select your time slot</option>
        <% ["Live Morning (6 AM ‚Äì 8 AM)", "Live Evening (6 PM ‚Äì 8 PM)"].forEach(slot => { %>
          <option value="<%= slot %>" <%= user.preferredTimeSlot === slot ? 'selected' : '' %>><%= slot %></option>
        <% }) %>
      </select>
    </div>

    <div class="row mb-3">
      <div class="col-md-6">
        <label class="form-label">Height (in cm):</label>
        <input type="number" name="height" id="height" class="form-control" required value="<%= user.height || '' %>">
      </div>
      <div class="col-md-6">
        <label class="form-label">Weight (in kg):</label>
        <input type="number" name="weight" id="weight" class="form-control" required value="<%= user.weight || '' %>">
      </div>
    </div>

    <div class="mb-3">
      <label class="form-label">BMI:</label>
      <input type="text" id="bmi" class="form-control" disabled>
    </div>

    <div class="mb-3">
      <label class="form-label">Upload Profile Picture:</label>
      <input type="file" name="profileImage" accept="image/*" class="form-control" <%= user.profileImage ? '' : 'required' %>>
    </div>

    <div class="d-flex justify-content-end">
      <button type="submit" class="btn btn-primary px-4">Save Profile</button>
    </div>
  </form>
</div>
<script>
  const sendOtpBtn = document.getElementById("sendOtpBtn");
  const otpContainer = document.getElementById("otpContainer");
  const otpInput = document.getElementById("otpInput");
  const otpVerified = document.getElementById("otpVerified");
  const otpStatus = document.getElementById("otpStatus");
  const otpFeedback = document.getElementById("otpFeedback");
  const verifyOtpBtn = document.getElementById("verifyOtpBtn");

  // === Step 1: Send OTP (email only) ===
  sendOtpBtn?.addEventListener("click", async () => {
    sendOtpBtn.disabled = true;
    sendOtpBtn.innerText = "Sending...";
    otpFeedback.style.color = "black";

    try {
      const res = await fetch("/user/send_otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({}) // No phone number required
      });

      const data = await res.json();

      if (data.success) {
        otpContainer.style.display = "block";
        otpFeedback.style.color = "green";
        otpFeedback.innerText = "OTP sent to your registered email!";
      } else {
        otpFeedback.style.color = "red";
        otpFeedback.innerText = data.message || "OTP not sent.";
      }
    } catch (err) {
      otpFeedback.style.color = "red";
      otpFeedback.innerText = "‚ùå Network error while sending OTP.";
    }

    sendOtpBtn.disabled = false;
    sendOtpBtn.innerText = "Send OTP";
  });

  // === Step 2: Verify OTP ===
  verifyOtpBtn?.addEventListener("click", async () => {
    const otp = otpInput.value.trim();

    if (!otp || otp.length !== 6) {
      otpStatus.style.color = "red";
      otpStatus.innerText = "Please enter a valid 6-digit OTP.";
      return;
    }

    verifyOtpBtn.disabled = true;
    verifyOtpBtn.innerText = "Verifying...";

    try {
      const res = await fetch("/user/verify_otp", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ otp })
      });

      const data = await res.json();

      if (data.success) {
        otpVerified.value = "true";
        otpStatus.style.color = "green";
        otpStatus.innerText = "‚úÖ OTP Verified";
        otpInput.disabled = true;
        verifyOtpBtn.disabled = true;
        sendOtpBtn.disabled = true;
      } else {
        otpStatus.style.color = "red";
        otpStatus.innerText = data.message || "‚ùå Incorrect OTP.";
      }
    } catch (err) {
      otpStatus.style.color = "red";
      otpStatus.innerText = "‚ùå Network error while verifying OTP.";
    }

    verifyOtpBtn.disabled = false;
    verifyOtpBtn.innerText = "Verify OTP";
  });

  // === Prevent Form Submission Without OTP ===
  document.querySelector("form").addEventListener("submit", function (e) {
    if (otpVerified.value !== "true") {
      e.preventDefault();
      otpStatus.style.color = "red";
      otpStatus.innerText = "‚ùó Please verify your OTP before submitting.";
    }
  });

  // === DOB ‚Üí Age Auto Calculation ===
  const dobInput = document.getElementById("dob");
  const ageInput = document.getElementById("age");

  function updateAge() {
    const dob = new Date(dobInput.value);
    const today = new Date();
    let age = today.getFullYear() - dob.getFullYear();
    if (
      today.getMonth() < dob.getMonth() ||
      (today.getMonth() === dob.getMonth() && today.getDate() < dob.getDate())
    ) {
      age--;
    }
    ageInput.value = age;
  }

  dobInput?.addEventListener("change", updateAge);
  if (dobInput?.value) updateAge();

  // === Height, Weight ‚Üí BMI Calculator ===
  const heightInput = document.getElementById("height");
  const weightInput = document.getElementById("weight");
  const bmiInput = document.getElementById("bmi");

  function calculateBMI() {
    const height = parseFloat(heightInput.value);
    const weight = parseFloat(weightInput.value);
    if (!isNaN(height) && !isNaN(weight) && height > 0) {
      const heightInMeters = height / 100;
      const bmi = weight / (heightInMeters * heightInMeters);
      bmiInput.value = bmi.toFixed(2);
    }
  }

  heightInput?.addEventListener("input", calculateBMI);
  weightInput?.addEventListener("input", calculateBMI);
  if (heightInput?.value && weightInput?.value) calculateBMI();

  // === Referral Source: Show 'Other' Input ===
  const referralSelect = document.getElementById("referralSource");
  const otherReferralDiv = document.getElementById("otherReferralDiv");
  const otherReferralInput = document.getElementById("otherReferralInput");

  referralSelect?.addEventListener("change", () => {
    if (referralSelect.value === "Other") {
      otherReferralDiv.classList.remove("d-none");
      otherReferralInput.setAttribute("required", "required");
    } else {
      otherReferralDiv.classList.add("d-none");
      otherReferralInput.removeAttribute("required");
    }
     });
</script>

<style>
  /* === FORM STYLING FOR COMPLETE PROFILE PAGE === */

body {
    background: linear-gradient(135deg, #dbe4f0, #c8d4e8, #e3e3e3);
    background-size: cover;
  }

h3 {
  color: rgb(1, 24, 45);
  font-weight: 700;
}

.card {
  background: white;
  border: 1px solid #ddd;
  border-radius: 12px;
}

label.form-label {
  color: rgb(1, 24, 45);
  font-weight: 600;
}

input.form-control,
textarea.form-control,
select.form-select {
  border-radius: 8px;
  border: 1px solid #ccc;
  transition: all 0.3s ease;
}

input.form-control:focus,
textarea.form-control:focus,
select.form-select:focus {
  border-color: rgb(1, 24, 45);
  box-shadow: 0 0 0 0.2rem rgba(1, 24, 45, 0.2);
}

.form-check-input:checked {
  background-color: rgb(1, 24, 45);
  border-color: rgb(1, 24, 45);
}

.form-check-label {
  font-weight: 500;
  color: #333;
}

#otpFeedback,
#otpStatus {
  font-weight: 500;
}

.btn-primary {
  background-color: rgb(1, 24, 45);
  border-color: rgb(1, 24, 45);
  font-weight: 600;
}

.btn-primary:hover {
  background-color: #022034;
  border-color: #022034;
}

.btn-outline-primary {
  color: rgb(1, 24, 45);
  border-color: rgb(1, 24, 45);
  font-weight: 500;
}

.btn-outline-primary:hover {
  background-color: rgb(1, 24, 45);
  color: white;
  border-color: white;
}

.btn-outline-success {
  color: green;
  border-color: green;
  font-weight: 500;
}

.btn-outline-success:hover {
  background-color: green;
  color: white;
}

/* Optional enhancements */
input[disabled],
input[readonly] {
  background-color: #f5f5f5;
  color: #555;
}

.alert-danger {
  border-radius: 6px;
  background-color: #ffe6e6;
  color: #a94442;
  font-weight: 500;
}

#bmi,
#age {
  background-color: #f2f2f2;
  font-weight: 500;
}

  </style>